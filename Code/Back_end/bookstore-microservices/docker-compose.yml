version: '3.8'

services:
  # API Gateway
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - AUTH_SERVICE_URL=http://auth-service:8081
      - BOOK_SERVICE_URL=http://book-service:8082
      - ORDER_SERVICE_URL=http://order-service:8083
      - CUSTOMER_SERVICE_URL=http://customer-service:8084
      - INVENTORY_SERVICE_URL=http://inventory-service:8085
      - PAYMENT_SERVICE_URL=http://payment-service:8086
      - SEARCH_SERVICE_URL=http://search-service:8087
    depends_on:
      - auth-service
      - book-service
      - order-service
      - customer-service
      - inventory-service
      - payment-service
      - search-service
    networks:
      - bookstore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Authentication Service
  auth-service:
    build: ./auth-service
    container_name: auth-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/auth_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
    depends_on:
      - postgres
    networks:
      - bookstore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Book Service
  book-service:
    build: ./book-service
    container_name: book-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/book_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
    depends_on:
      - postgres
      - kafka
      - redis
    networks:
      - bookstore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Order Service
  order-service:
    build: ./order-service
    container_name: order-service
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/order_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - BOOK_SERVICE_URL=http://book-service:8082
      - CUSTOMER_SERVICE_URL=http://customer-service:8084
      - INVENTORY_SERVICE_URL=http://inventory-service:8085
    depends_on:
      - postgres
      - kafka
      - book-service
      - customer-service
      - inventory-service
    networks:
      - bookstore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Customer Service
  customer-service:
    build: ./customer-service
    container_name: customer-service
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/customer_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - postgres
      - kafka
    networks:
      - bookstore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Inventory Service
  inventory-service:
    build: ./inventory-service
    container_name: inventory-service
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/inventory_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - BOOK_SERVICE_URL=http://book-service:8082
    depends_on:
      - postgres
      - kafka
      - book-service
    networks:
      - bookstore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Payment Service
  payment-service:
    build: ./payment-service
    container_name: payment-service
    ports:
      - "8086:8086"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/payment_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ORDER_SERVICE_URL=http://order-service:8083
    depends_on:
      - postgres
      - kafka
      - order-service
    networks:
      - bookstore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Search Service
  search-service:
    build: ./search-service
    container_name: search-service
    ports:
      - "8087:8087"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
    depends_on:
      - elasticsearch
      - kafka
    networks:
      - bookstore-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  bookstore-network:
    driver: bridge

volumes:
  postgres-data:
  elasticsearch-data:
  redis-data:
  kafka-data:
  zookeeper-data: